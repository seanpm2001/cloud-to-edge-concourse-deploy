# set value to true for verbose output from ansible
enable_ansible_debug: false
# If true, emit extra logging around cloud API calls
enable_cloud_debug: false
# Set to name of installer or env or any value so resources can be identified
c2e_installer: cloud-to-edge-concourse

# This is a key with access to download private repos (if you have any)
git_key: |
  -----BEGIN RSA PRIVATE KEY-----
  your-private-key-here-if-needed
  -----END RSA PRIVATE KEY-----

# OVA general network settings
ntpservers: 10.13.12.2                    # EDIT
dnsserver: 10.13.12.2                     # EDIT
dnsdomain: corp.local.io                  # EDIT
defaultgateway: 10.13.12.1                # EDIT
netmask: 255.255.255.0                    # EDIT

# Host a Webserver to serve the ova images.
# The web server is set up automatically by automation, but you should set the
# IP address here.
binary_webserver: http://10.sample.ip.100

# Download base ova, e.g.
# https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64.ova
# These should be available at the webserver above.  (The automation will save
# downloaded files into the webroot of the deployed server.)
base_ova_name: xenial-server-cloudimg-amd64.ova
base_ova_name_arm: xenial-server-cloudimg-arm64.ova

# Ensure ovftool is minimally v4.2
# https://my.vmware.com/group/vmware/details?productId=614&downloadGroup=OVFTOOL420#
ovftool_image: VMware-ovftool-4.3.0-7948156-lin.x86_64.bundle

# Stub for edge VM names: will become [edge_vm_basename]-[edge_group]
c2e_edge_vm_basename: edgevm
# Default credentials to add to Edge VMs
c2e_edge_vm_user: edgevm
c2e_edge_vm_password: c2e-passZ!

# This will serve as a default if no specific network is provided in
# skway_edges
c2e_edge_vm_network: VM-RegionA01-vDS-COMP

# Private key for connecting to Edge VMs.  If set, should correspond to the
# pub key below
c2e_edge_vm_ssh_priv_key: |
  -----BEGIN RSA PRIVATE KEY-----
  private-key-here...value-not-important-should-match-pub-below
  -----END RSA PRIVATE KEY-----

# Key to be deposited on created VMs for access.
# Automation should have access to a corresponding private key.
c2e_edge_vm_ssh_pub_key: |
  ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCX/adFOoYeKAcD81EogrCj5/2FsmJD2i/5geS
  .blah.blah...
  bIFop nobody@this-is-a-placeholder-key.com

# For each Edge, define the vCenter/VM settings
c2e_edges:
  - edge_group: mygroup-1
    vcenter_host:         # EDIT - Specific vCenter for this Edge
    vcenter_usr:          # EDIT - Specific vCenter for this Edge
    vcenter_pwd:          # EDIT - Specific vCenter for this Edge
    vcenter_datacenter:   # EDIT - Specific vCenter for this Edge
    vcenter_datastore:    # EDIT - Specific vCenter for this Edge
    vcenter_cluster:      # EDIT - Specific vCenter for this Edge
    vcenter_rp:           # EDIT - Specific vCenter for this Edge
  - edge_group: mygroup-2
    vcenter_host:         # EDIT - Specific vCenter for this Edge
    vcenter_usr:          # EDIT - Specific vCenter for this Edge
    vcenter_pwd:          # EDIT - Specific vCenter for this Edge
    vcenter_datacenter:   # EDIT - Specific vCenter for this Edge
    vcenter_datastore:    # EDIT - Specific vCenter for this Edge
    vcenter_cluster:      # EDIT - Specific vCenter for this Edge
    vcenter_rp:           # EDIT - Specific vCenter for this Edge
  - edge_group: mygroup-3
    vcenter_host:         # EDIT - Specific vCenter for this Edge
    vcenter_usr:          # EDIT - Specific vCenter for this Edge
    vcenter_pwd:          # EDIT - Specific vCenter for this Edge
    vcenter_datacenter:   # EDIT - Specific vCenter for this Edge
    vcenter_datastore:    # EDIT - Specific vCenter for this Edge
    vcenter_cluster:      # EDIT - Specific vCenter for this Edge
    vcenter_rp:           # EDIT - Specific vCenter for this Edge
  - edge_group: mygroup-4
    vcenter_host:         # EDIT - Specific vCenter for this Edge
    vcenter_usr:          # EDIT - Specific vCenter for this Edge
    vcenter_pwd:          # EDIT - Specific vCenter for this Edge
    vcenter_datacenter:   # EDIT - Specific vCenter for this Edge
    vcenter_datastore:    # EDIT - Specific vCenter for this Edge
    vcenter_cluster:      # EDIT - Specific vCenter for this Edge
    vcenter_rp:           # EDIT - Specific vCenter for this Edge
  - edge_group: mygroup-5
    vcenter_host:         # EDIT - Specific vCenter for this Edge
    vcenter_usr:          # EDIT - Specific vCenter for this Edge
    vcenter_pwd:          # EDIT - Specific vCenter for this Edge
    vcenter_datacenter:   # EDIT - Specific vCenter for this Edge
    vcenter_datastore:    # EDIT - Specific vCenter for this Edge
    vcenter_cluster:      # EDIT - Specific vCenter for this Edge
    vcenter_rp:           # EDIT - Specific vCenter for this Edge

# Default Sizing of C2E Edge VMs
# small  : 2 vCPU,  4GB RAM
# medium : 4 vCPU,  8GB RAM
# large  : 8 vCPU, 16GB RAM

# Change default size for deployment for edge VMs
c2e_edge_deploy_size: small

# This is a catch all for customization.  Since concourse config requires all
# variables to be explicitly listed, and tasks need to redefine them to expose
# them inside a job, this list of key/value pairs "tunnels" additional settings
# without needing to add them to formal
c2e_bundle_params: []

# ===== Azure IoT Settings =====
# Globally enable/disable Azure IoT
azure_iot_enable: true

# Azure auth settings
# See: https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-create-service-principal-portal
azure_cli_application_id: FIXME
azure_cli_application_key: FIXME
azure_cli_tenant_id: FIXME

# Name of the IoT hub
azure_iot_hub_name: ci-iot-hub

# Group to contain the IoT resources (will be created if it does not exist).
azure_iot_group: ci-iot-group

# Names for the Edges to be created.
azure_iot_edge_names:
  - mygroup-1
  - mygroup-4
  - mygroup-5

# List of modules to deploy at the edge gateway.
# The default is a sample simulated temperature sensor.
azure_modules:
  - name: tempSensor
    image: mcr.microsoft.com/azureiotedge-simulated-temperature-sensor:1.0
    desiredStatus: running
    restartPolicy: always
    createOptions: {}
    desiredProperties: {}

# Routes to ensure messages reach their destination.
# This default just sends the temperature sensor to the hub.
azure_routes:
  - name: tempSensorToIoTHub
    route: FROM /messages/modules/tempSensor/outputs/* INTO $upstream

# Tag used to designate edges we deploy.
# It can have a different name but should be set for correct operation.
auto_edge_tag: automatic_edge

# Tag used to designate devices we create
# It can have a different name but should be set for correct operation.
auto_device_tag: automatic_device

# ===== AWS Greengrass Settings =====
# Globally enable/disable AWS Greengrass
aws_greengrass_enable: true

# AWS auth settings
aws_access_key: FIXME
aws_secret_key: FIXME
aws_region: us-west-2

# AWS Greengrass settings
# This S3 bucket is used to store credentials, lambda code, etc.
greengrass_s3_bucket: greengrass-items

# Greengrass groups to create.  A matching core will be created for each group,
# and deployed to a target host, if a host in the inventory has a matching Core
# ID.  For example, a host with a host variable
# greengrass_core_id='mygroup-1_Core'
# would receive a deployment of the first group in this list below.
greengrass_group_names:
  - mygroup-1
  - mygroup-2
  - mygroup-3

# The role will create devices of the form {greengrass_device_stub}N, where N
# is between 1 and greengrass_device_count.
# These can be left undefined if no devices should be mass-created this way.
greengrass_device_stub: my-device
greengrass_device_count: 1

# This drives deployments of groups/cores, since it's not always clear when a
# new deployment should occur.  It only makes sense to set either deploy or
# redeploy.  A group may have neither set if it has not changed.
greengrass_deploy:
  mygroup-1:
    redeploy: false
    deploy: true
  mygroup-2:
    redeploy: false
    deploy: false
